name: CI

on:
  pull_request:
  push:
    branches:
    - master
    - release/*

jobs:
  clang-tidy:
    name: Clang-Tidy

    runs-on: ubuntu-20.04
    env:
      CC: clang
      CXX: clang++

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        echo "::group::Update apt"
        sudo apt-get update
        echo "::endgroup::"

        echo "::group::Install dependencies"
        sudo apt-get install -y --no-install-recommends \
          libpng-dev \
          libglfw3-dev \
          libglew-dev \
          zlib1g-dev \
          python-yaml \
          clang-tidy \
          # EOF
        echo "::endgroup::"
      env:
        DEBIAN_FRONTEND: noninteractive

    - name: Check
      run: |
        echo "::group::CMake"
        mkdir build
        pushd build
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        echo "::endgroup::"

        echo "::group::Compile"
        echo "Running on $(nproc) cores"
        cmake --build . -j $(nproc)
        echo "::endgroup::"

        echo "::group::clang-tidy"
        python3 ../utils/run-clang-tidy.py -checks=*,-android*,-fuchsia* | tee ../clang-tidy.log
        popd
        echo "::endgroup::"

    - name: Results
      run: ./utils/check_clang_tidy_results.py clang-tidy.log   || true  # TODO Let this check fail on errors once we've cleaned up all hits.

  linux:
    name: Linux

    strategy:
      fail-fast: false
      matrix:
        include:
        - compiler: clang
          cxxcompiler: clang++
          config: Release
        - compiler: gcc
          cxxcompiler: g++
          config: Release
        - compiler: clang
          cxxcompiler: clang++
          config: Debug
        - compiler: gcc
          cxxcompiler: g++
          config: Debug

    runs-on: ubuntu-20.04
    env:
      CC: ${{ matrix.compiler }}
      CXX: ${{ matrix.cxxcompiler }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        echo "::group::Update apt"
        sudo apt-get update
        echo "::endgroup::"

        echo "::group::Install dependencies"
        sudo apt-get install -y --no-install-recommends \
          libpng-dev \
          libglfw3-dev \
          libglew-dev \
          zlib1g-dev \
          # EOF
        echo "::endgroup::"
      env:
        DEBIAN_FRONTEND: noninteractive

    - name: Install GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build
      run: |
        mkdir build
        cd build

        echo "::group::CMake"
        if [ ${{ matrix.config }} == Release ]; then rel="-DRELEASE=ON"; else rel=""; fi
        cmake .. $rel -DDEBIAN_PACKAGING=ON
        echo "::endgroup::"

        echo "::group::Build"
        echo "Running on $(nproc) cores"
        cmake --build . -j $(nproc)
        echo "::endgroup::"

        echo "::group::Package"
        cpack
        echo "::endgroup::"

    - name: Upload package (DEB)
      uses: actions/upload-artifact@v3
      with:
        name: 'FreeRCT Debian+Ubuntu ${{ matrix.config }} Package (${{ matrix.compiler }})'
        path: ${{ github.workspace }}/build/bundles/*.deb*
    - name: Upload package (TXZ)
      uses: actions/upload-artifact@v3
      with:
        name: 'FreeRCT ${{ matrix.config }} Tarball (${{ matrix.compiler }})'
        path: ${{ github.workspace }}/build/bundles/*.tar.xz*

  macos:
    name: Mac OS

    strategy:
      fail-fast: false
      matrix:
        include:
        - arch: x64
          full_arch: x86_64
          config: Release
        - arch: x64
          full_arch: x86_64
          config: Debug

    runs-on: macos-latest
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Prepare cache key
      id: key
      run: |
        echo "::set-output name=image::$ImageOS-$ImageVersion"

    - name: Enable vcpkg cache
      uses: actions/cache@v2
      with:
        path: /usr/local/share/vcpkg/installed
        key: ${{ steps.key.outputs.image }}-vcpkg-${{ matrix.arch }}

    - name: Prepare vcpkg
      run: |
        vcpkg install --triplet=${{ matrix.arch }}-osx-dynamic \
          libpng \
          glfw \
          glew \
          zlib \
          # EOF

    - name: Install GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build
      run: |
        mkdir build
        cd build

        echo "::group::CMake"
        if [ ${{ matrix.config }} == Release ]; then rel="-DRELEASE=ON"; else rel=""; fi
        cmake ${GITHUB_WORKSPACE} \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.full_arch }} \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-osx-dynamic \
          -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake \
          $rel \
          # EOF
        echo "::endgroup::"

        echo "::group::Build"
        echo "Running on $(sysctl -n hw.logicalcpu) cores"
        cmake --build . -j $(sysctl -n hw.logicalcpu)
        echo "::endgroup::"

      # TODO implement packaging for MacOS

  windows:
    name: Windows

    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x64]
        config: [Debug, Release]

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Prepare cache key
      id: key
      shell: powershell
      run: |
        # Work around caching failure with GNU tar
        New-Item -Type Junction -Path vcpkg -Target c:\vcpkg

        Write-Output "::set-output name=image::$env:ImageOS-$env:ImageVersion"

    - name: Enable vcpkg cache
      uses: actions/cache@v2
      with:
        path: vcpkg/installed
        key: ${{ steps.key.outputs.image }}-vcpkg-${{ matrix.arch }}

    - name: Prepare vcpkg
      shell: bash
      run: |
        vcpkg install --triplet=${{ matrix.arch }}-windows-static \
          libpng \
          glfw \
          glew \
          zlib \
          graphite2 \
          harfbuzz \
          # EOF

    - name: Install MSVC problem matcher
      uses: ammaraskar/msvc-problem-matcher@master

    - name: Configure developer command prompt for ${{ matrix.arch }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Build
      shell: bash
      run: |
        mkdir build
        cd build

        echo "::group::CMake"
        if [ ${{ matrix.config }} == Release ]; then rel="-DRELEASE=ON"; else rel=""; fi
        cmake .. \
          -GNinja \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-windows-static \
          -DCMAKE_TOOLCHAIN_FILE="c:\vcpkg\scripts\buildsystems\vcpkg.cmake" \
          $rel \
          # EOF
        echo "::endgroup::"

        echo "::group::Build"
        cmake --build .
        echo "::endgroup::"

        echo "::group::Package"
        cpack
        echo "::endgroup::"

    - name: Upload package (EXE)
      uses: actions/upload-artifact@v3
      with:
        name: 'FreeRCT Windows ${{ matrix.arch }} ${{ matrix.config }} Installer'
        path: ${{ github.workspace }}/build/bundles/*.exe*
    - name: Upload package (ZIP)
      uses: actions/upload-artifact@v3
      with:
        name: 'FreeRCT Windows ${{ matrix.arch }} ${{ matrix.config }} Zip'
        path: ${{ github.workspace }}/build/bundles/*.zip*
